#!/usr/bin/env python3
import sys
import getopt
import lex_synt_analysis
import semantic_analysis

########################################################################################################################
################################################ ARGUMENT PARSING ######################################################
########################################################################################################################


def arg_parser():
    help_option = """
===========================================================================================================
Interpret for IPPcode20. Source code must be in XML representation, for example generated by parse.php. 
If one of the arguments --input and --source is missing interpret loads particular data from stdin.
===========================================================================================================
"""
    try:
        opts, args = getopt.getopt(sys.argv[1:], "", ["source=", "input=", "help"])
    except getopt.GetoptError:
        print("Error: Wrong arguments given!")
        exit(10)

    help_ = source_ = input_ = False
    source_filename = input_filename = None

    for opt, arg in opts:
        if opt == "--help":
            help_ = True
        elif opt == "--source":
            source_ = True
            source_filename = arg
        elif opt == "--input":
            input_ = True
            input_filename = arg

    if help_ and (source_ or input_):  # can not combine help option with other flags
        exit(10)

    elif not source_ and not input_:  # both input and source are missing (invalid input)
        exit(10)

    elif help_:  # help option in correct way
        print(help_option)
        exit(0)

    names = {
        "source": source_filename,
        "input": input_filename
    }
    return names  # returning dictionary


########################################################################################################################
###################################################### MAIN ############################################################
########################################################################################################################

def main():
    filenames = arg_parser()

    src = filenames.get("source")
    inp = filenames.get("input")

    if src is not None and inp is None:  # it's a file and inp must be stdin (string)
        LexicSyntacAnalysis = lex_synt_analysis.LexSyntAnalysis(src, "file")
        SemAnalysis = semantic_analysis.SemanticAnalysis(inp, "string", src, "file")

    elif inp is not None and src is None:  # it's a file
        strng = []
        for src in sys.stdin:
            strng.append(src)
        src = ''.join(strng)
        LexicSyntacAnalysis = lex_synt_analysis.LexSyntAnalysis(src, "string")
        SemAnalysis = semantic_analysis.SemanticAnalysis(inp, "file", src, "string")

    elif inp is not None and src is not None:
        LexicSyntacAnalysis = lex_synt_analysis.LexSyntAnalysis(src, "file")
        SemAnalysis = semantic_analysis.SemanticAnalysis(inp, "file", src, "file")

    LexicSyntacAnalysis.xml_parser()  # lexical and syntactical analysis of an xml file
    SemAnalysis.run_analysis()  # semantic analysis of IPPcode20 and interpretation


if __name__ == '__main__':
    main()
